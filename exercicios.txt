Para os próximos exercícios, elabore a função pedida, deixando claro como seria a chamada no programa 
principal. NÃO É NECESSÁRIO CRIAR O PROGRAMA PRINCIPAL 
 
ELABORE UMA FUNÇÃO QUE: 
a. Tenha como parâmetro uma fila. Retire os valores da fila e coloque-os em uma pilha 

Pilha *ex6_A(Fila *f)//Retira da Fila e coloca na Pilha
{
    int aux=0;
    Pilha *p=CriaPilha();
    while(VaziaFila(f)!=1)
    {
        aux=RetiraFila(f);
        push(p,aux);
    }
    return p;
}
b. Transforme uma pilha em fila onde o topo da pilha é o início da fila 

Fila *ex6_B(Pilha *p)//Pilha -> Fila topo da Pilha é o inicio da Fila
{
    int aux=0;
    Fila *f=CriaFila();
    while(vaziaPilha(p)!=1)
    {
        aux=pop(p);
        InsereFila(f,aux);
    }
    return f;
}

c. Transforme uma pilha em fila onde o topo da pilha é o fim da fila 

Fila *ex6_C(Pilha *p)//O topo da Pilha é o final da Fila
{
    int aux=0;
    Pilha *p2=CriaPilha();//passo para essa dps para a fila e ai fica invertido
    Fila *f=CriaFila();
    while(vaziaPilha(p)!=1)
    {
        aux=pop(p);
        push(p2,aux);
    }
    aux=0;
    while(vaziaPilha(p2)!=1)
    {
        aux=pop(p2);
        InsereFila(f,aux);
    }
    return f;
}

d. Tenha  como  parâmetro  duas  filas  F1  e  F2.  Cada  uma  das  filas  não  possui  elementos  repetidos. 
Construa uma terceira fila (F3) que possua todos os elementos de F1 e F2, mas sem repetir números 

Fila *ex6_D(Fila *f,Fila *f2)//Mescla duas filas sem repetir numeros
{
    No *q;
    int num=0,flag=0;
    Fila *f3=CriaFila();
    while(VaziaFila(f)!=1)
    {
        num=RetiraFila(f);
        InsereFila(f3,num);
    }
    while(VaziaFila(f2)!=1)
    {
        num=RetiraFila(f2);
        flag=0;
        for (q=f3->ini; q!=NULL; q=q->prox)
        {
            if(q->info==num)
            {
                flag=1;
            }
        }
        if(flag==0)
        {
            InsereFila(f3,num);
        }
    }
    return f3;
}
e. Determine a quantidade de nós que existem na árvore 

int NoINterno(NoArv *Pai)//conta no interno
{
    int cont=0;
    if((Pai->dir!=NULL)||(Pai->esq!=NULL))
    {
        cont+=1;
    }
    if(Pai->dir!=NULL)
    {
        cont+=NoINterno(Pai->dir);
    }
    if(Pai->esq!=NULL)
    {
        cont+=NoINterno(Pai->esq);
    }
    return cont;
}// na programa principal se deve decrementar um

int ContaNo(NoArv *Pai)//Conta todos os nós menos a raiz
{    int cont=0;
    if(Pai->dir!=NULL)
    {
        cont+=1+ContaNo(Pai->dir);
    }
    if(Pai->esq!=NULL)
    {
        cont+=1+ContaNo(Pai->esq);
    }
    return cont;
}

f. Retorne a quantidade de folhas de uma árvore 

int NoFolha(NoArv *Pai)//contar nós folhas ou seja nos que nao tem filhos
{
    int cont=0;
    if((Pai->dir==NULL)&&(Pai->esq==NULL)){
        cont+=1;
    }
    if(Pai->dir!=NULL)
    {
        cont+=NoFolha(Pai->dir);
    }
    if(Pai->esq!=NULL)
    {
        cont+=NoFolha(Pai->esq);
    }
    return cont;
}

g. Determine o nível de um certo nó, se ele existir na árvore 

int noNivel (NoArv *Pai, int num)
{
    int nivel=-1;
    int flag =1;
    while(flag==1)
    {
        nivel=nivel+1;
        if(Pai->info==num)
        {
            flag=0;
        }else{
            if (num>Pai->info)
            {
                if(Pai->dir!=NULL)
                {
                    Pai=Pai->dir;
                }else{
                    flag=-1;
                    nivel=-1;
                }
            }else{
                if(Pai->esq!=NULL)
                {
                    Pai=Pai->esq;
                }else{
                    flag=-1;
                    nivel=-1;
                }
            }
        }
    }
    return nivel;
}

h. Determine a quantidade de descendentes de um certo nó, se ele existir na árvore

int NosDescendentes (NoArv *Pai, int num)
{
    int descendente=-1;
    int flag =1;
    while(flag==1)
    {
        if(Pai->info==num)
        {
            if (num>Pai->info)
            {
                if(Pai->dir!=NULL)
                {        
                    descendente+=1;
                    Pai=Pai->dir;
                }else if(Pai->esq!=NULL)
                {
                    descendente+=1;
                    Pai=Pai->esq;
                }
                flag=0;
            }   
        }else{
            if (num>Pai->info)
            {
                if(Pai->dir!=NULL)
                {        
                    Pai=Pai->dir;
                }else if(Pai->esq!=NULL)
                {
                    Pai=Pai->esq;
                }
                flag=0;
            }
        }
    }
    return descendente;
}

